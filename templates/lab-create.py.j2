#!/usr/local/bin/python3
### Maintained by carias@redhat.com

import time, os.path
from selenium import webdriver
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import logging

# Chromedriver options
options = webdriver.ChromeOptions()
#options.add_argument('headless')
options.add_argument("--window-size=1920,1080")
options.add_argument("--user-data-dir={{ ansible_env.HOME}}/.config/google-chrome/lx-qa")

# Define the webdriver to use.
driver = webdriver.Chrome(executable_path="/usr/bin/chromedriver", chrome_options=options)

## Firefox options
#firefox_options = Options()
##firefox_options.add_argument("--headless")
#
## Firefox webdriver
#driver = webdriver.Firefox(options=firefox_options)
#driver.maximize_window()



# Go to the website
def go_to_main_site(lab_environment):
    driver.get('https://rol-cn.ole.redhat.com/rol/app/login/local')


def go_to_course(lab_environment, course_id):
    WebDriverWait(driver, 30).until(EC.element_to_be_clickable(
        (By.XPATH, '//*[@id="avatar"]')))
    driver.get('https://rol-cn.ole.redhat.com/rol/app/courses/' + course_id)


def login():
    try:
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="login_button"]')))
        driver.find_element("xpath", '//*[@id="username"]').send_keys("rhls_test_basic_cn_003")
        driver.find_element("xpath", '//*[@id="password"]').send_keys("redhat123")
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="login_button"]'))).click()

    except:
        logging.error("An exception occurred while accepting during login")


def accept_cookies():
    try:
        WebDriverWait(driver, 5).until(
            EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//iframe[@title="TrustArc Cookie Consent Manager"]')))
        time.sleep(1)
        WebDriverWait(driver, 5).until(EC.element_to_be_clickable(
            (By.XPATH, "//a[@class='call'][text()='Agree and proceed with standard settings']"))).click()
        driver.refresh()
    except:
        logging.error("An exception occurred while accepting cookies")

def start_lab(lab_environment, course_id):
    try:
        driver.refresh()
        WebDriverWait(driver, 30).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="course-tabs-tab-8"]/span[2]'))).click()

        driver.find_element("xpath", "//*[text()='Start']").click()

    except:
        print("An exception occurred during lab start in " + lab_environment + " environment and course " + course_id)
        create_lab(lab_environment, course_id)


def create_lab(lab_environment, course_id):
    time.sleep(10)
    try:
#        try:
#            available = False
#            WebDriverWait(driver, 3).until(EC.element_to_be_clickable(
#            (By.XPATH, '//*[@id="app"]/article/div/div[1]')))
#            logging.error(course_id + " not deployed")
#        except:
#            available = True
#

#        if available:
            WebDriverWait(driver, 35).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="course-tabs-tab-8"]/span[2]'))).click()

            WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[text()="Create"]'))).click()
    except:
        logging.error(
            "An exception occurred during lab creation in " + lab_environment + " environment and course " + course_id)

def increase_lifespan(lab_environment, course_id):
    try:
        WebDriverWait(driver, 60).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="course-tabs-tab-8"]/span[2]'))).click()

        increase_lifespan = WebDriverWait(driver, 3).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="tab-course-lab-environment"]/div/table/tr[2]/td[2]/button')))

        for i in range(30):
            increase_lifespan.click()
    except:
        logging.error("An exception occurred during lifespan extension in " + lab_environment + " environment and course " + course_id)

def increase_autostop(lab_environment, course_id):
    try:
        WebDriverWait(driver, 30).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="tab-course-lab-environment"]/div/table/tr[1]/td[2]/button')))

        increase_autostop = WebDriverWait(driver, 3).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="tab-course-lab-environment"]/div/table/tr[1]/td[2]/button')))

        for i in range(30):
            increase_autostop.click()
    except:
        print(
            "An exception occurred during lifespan extension in " + lab_environment + " environment and course " + course_id)

def start_qa():
    driver.refresh()
    time.sleep(3)
    WebDriverWait(driver, 30).until(EC.element_to_be_clickable(
        (By.XPATH, '//*[@id="course-tabs-tab-8"]/span[2]'))).click()

    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '/html/body/div[1]/section/div/div[3]/div/section/div[2]/div/div[3]/div/div/div[3]/table/tbody/tr[6]/td[3]/button'))).click()

    time.sleep(10)

    handles = driver.window_handles
    for handle in handles:
        print(handle)

    newHandle = handles[1]
    driver.switch_to.window(newHandle)

def get_commands(chapter_url):
    driver.get(chapter_url)
    section_html = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, '/html/body/div[1]/section/div/div[3]/div/section'))).get_attribute("outerHTML")
    commands = os.popen("echo '" + section_html + "' | xq -x //userinput").read()
    print(str(commands))
    return str(commands)


def introduce_commands(commands):
    send_text_option_button = WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="showSendTextDialog"]')))
    show_keyboard_toggle = WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
        (By.XPATH, '//*[@id="showKeyboard"]')))


#    commands = """lab start strategy-scientificmethod
#ssh student@servera
#ssh root@servera
#whoami
#su - student
#whoami
#lastlog -u student
#getent passwd student
#chsh -s /bin/bash student
#ssh student@servera
#exit
#lab finish strategy-scientificmethod
#lab strategy-scientificmethod finish
#"""

    commands_array = commands.split("\n")

    for line in commands_array:
        print(line)

        # Open text dialog
        send_text_option_button.click()
        # Paste command into text box
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="sendTextInput"]'))).send_keys(line)
        # Click Send button to send the command
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="sendTextButton"]'))).click()
        # wait to paste
        time.sleep(4)
        # Show keyboard and click enter
        show_keyboard_toggle.click()
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '/html/body/div[9]/div/div/div[3]/div/div[1]/div[3]/div[13]/div/div'))).click()
        # Hide keyboard
        show_keyboard_toggle.click()

        if "lab" in line:
            time.sleep(10)
        else:
            time.sleep(3)


## Main

go_to_main_site("{{ lab_environment }}")
accept_cookies()
login()
accept_cookies()
go_to_course("{{ lab_environment }}", "{{ item }}")

commands = get_commands("{{ chapter_url }}")

start_qa()
introduce_commands(commands)

create_lab("{{ lab_environment }}", "{{ item }}")
start_lab("{{ lab_environment }}", "{{ item }}")
increase_autostop("{{ lab_environment }}", "{{ item }}")
increase_lifespan("{{ lab_environment }}", "{{ item }}")

#driver.quit()
