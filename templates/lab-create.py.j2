#!/usr/local/bin/python3
### Maintained by carias@redhat.com

import time, re, os.path
from selenium import webdriver
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import logging

# Chromedriver options
options = webdriver.ChromeOptions()
options.add_argument('headless')
options.add_argument("--window-size=1920,1080")
#options.add_argument("--user-data-dir=/home/carias/.config/google-chrome/lx-qa")

# Define the webdriver to use.
driver = webdriver.Chrome(executable_path="/usr/bin/chromedriver", chrome_options=options)

## Firefox options
#firefox_options = Options()
##firefox_options.add_argument("--headless")
#
## Firefox webdriver
#driver = webdriver.Firefox(options=firefox_options)
#driver.maximize_window()


# Go to the website
def go_to_main_site(lab_environment):
    driver.get('https://rol-cn.ole.redhat.com/rol/app/login/local')


def go_to_course(lab_environment, course_id):
    WebDriverWait(driver, 30).until(EC.element_to_be_clickable(
        (By.XPATH, '//*[@id="avatar"]')))
    driver.get('https://rol-cn.ole.redhat.com/rol/app/courses/' + course_id)


def login():
    try:
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="login_button"]')))
        driver.find_element("xpath", '//*[@id="username"]').send_keys("rhls_test_basic_cn_003")
        driver.find_element("xpath", '//*[@id="password"]').send_keys("redhat123")
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="login_button"]'))).click()

    except:
        logging.error("An exception occurred while accepting during login")


def accept_cookies():
    try:
        WebDriverWait(driver, 1).until(
            EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//iframe[@title="TrustArc Cookie Consent Manager"]')))
        time.sleep(1)
        WebDriverWait(driver, 1).until(EC.element_to_be_clickable(
            (By.XPATH, "//a[@class='call'][text()='Agree and proceed with standard settings']"))).click()
        driver.refresh()
    except:
        logging.error("An exception occurred while accepting cookies")

def start_lab(lab_environment, course_id):
    try:
        driver.refresh()
        WebDriverWait(driver, 30).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="course-tabs-tab-8"]/span[2]'))).click()

        driver.find_element("xpath", "//*[text()='Start']").click()

    except:
        print("An exception occurred during lab start in " + lab_environment + " environment and course " + course_id)
        create_lab(lab_environment, course_id)


def create_lab(lab_environment, course_id):
    time.sleep(10)
    try:
#        try:
#            available = False
#            WebDriverWait(driver, 3).until(EC.element_to_be_clickable(
#            (By.XPATH, '//*[@id="app"]/article/div/div[1]')))
#            logging.error(course_id + " not deployed")
#        except:
#            available = True
#

#        if available:
            WebDriverWait(driver, 35).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="course-tabs-tab-8"]/span[2]'))).click()

            WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[text()="Create"]'))).click()
    except:
        logging.error(
            "An exception occurred during lab creation in " + lab_environment + " environment and course " + course_id)

def increase_lifespan(lab_environment, course_id):
    try:
        WebDriverWait(driver, 60).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="course-tabs-tab-8"]/span[2]'))).click()

        increase_lifespan = WebDriverWait(driver, 3).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="tab-course-lab-environment"]/div/table/tr[2]/td[2]/button')))

        for i in range(30):
            increase_lifespan.click()
    except:
        logging.error("An exception occurred during lifespan extension in " + lab_environment + " environment and course " + course_id)

def increase_autostop(lab_environment, course_id):
    try:
        WebDriverWait(driver, 30).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="tab-course-lab-environment"]/div/table/tr[1]/td[2]/button')))

        increase_autostop = WebDriverWait(driver, 3).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="tab-course-lab-environment"]/div/table/tr[1]/td[2]/button')))

        for i in range(30):
            increase_autostop.click()
    except:
        print(
            "An exception occurred during lifespan extension in " + lab_environment + " environment and course " + course_id)

def open_workstation():
    driver.refresh()
    time.sleep(3)
    # Open the Lab Environment tab
    WebDriverWait(driver, 30).until(EC.element_to_be_clickable(
        (By.XPATH, '//*[@id="course-tabs-tab-8"]/span[2]'))).click()
    # Open the workstation console;
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, "//*[text()='workstation']/../td[3]/button"))).click()
    # Wait for the console to open
    time.sleep(10)
    handles = driver.window_handles
    newHandle = handles[1]

    driver.switch_to.window(newHandle)

def get_commands(chapter_url):
    driver.get(chapter_url)
    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="avatar"]')))

    time.sleep(4)
    # Get the lab name and grep it in the project git directory to find the xml file
    lab_script_name = driver.find_element_by_xpath("//*[contains(text(),'lab start')]").text
    commands = os.popen("cat $(grep -ri '" + lab_script_name + "' {{ playbook_dir }}/files/* |grep xml |head -n1 |cut -d ':' -f'1') | xq -x //userinput").read()

    return str(commands)


def introduce_command(command, send_text_option_button, show_keyboard_toggle):
    # Open text dialog
    send_text_option_button.click()
    # Paste command into text box
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
        (By.XPATH, '//*[@id="sendTextInput"]'))).send_keys(command)
    # Click Send button to send the command
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
        (By.XPATH, '//*[@id="sendTextButton"]'))).click()
    # time.sleep depending on the length of the command
    wait_for_command_to_paste(command)
    # Show keyboard and click Enter
    show_keyboard_toggle.click()
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
        (By.XPATH, '/html/body/div[9]/div/div/div[3]/div/div[1]/div[3]/div[13]/div/div'))).click()
    # Hide keyboard
    show_keyboard_toggle.click()

def manage_special_commands(command):
    # case ssh -> yes y student passwd or redhat
    #
    return 0

def wait_for_command_to_paste(command):
    time.sleep(len(command) * 0.1)

def prompt_user_enter_to_continue(custom_message):
    print("")
    input("Press Enter to continue " + custom_message + "\n")

def qa(commands):
    send_text_option_button = WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="showSendTextDialog"]')))
    show_keyboard_toggle = WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
        (By.XPATH, '//*[@id="showKeyboard"]')))

    commands_array = commands.split("\n")

    for line in commands_array:
        print(line)

        if "lab start" in line or "lab finish" in line or "lab grade" in line:
            line = "date; time " + line
            introduce_command(line, send_text_option_button, show_keyboard_toggle)
            # Wait for user to continue after the lab script has executed
            prompt_user_enter_to_continue("with the exercise")
        elif "ssh" in line:
            introduce_command(line, send_text_option_button, show_keyboard_toggle)
            prompt_user_enter_to_continue("after the ssh")
        elif "ansible" in line:
            # Wait for user to continue after the playbook has been reviewed/created
            prompt_user_enter_to_continue("if you did review/create the playbook")
            introduce_command(line, send_text_option_button, show_keyboard_toggle)
            prompt_user_enter_to_continue("if playbook finished")
        elif "ok=" in line or "failed=" in line:
            print("skipping output")
        elif "vim" in line:
            introduce_command(line, send_text_option_button, show_keyboard_toggle)
            prompt_user_enter_to_continue("if you did review/create the file")
        elif "Enter" in line:
            line = "\n"
            introduce_command(line, send_text_option_button, show_keyboard_toggle)
        elif "less" in line:
            line = line.replace("less", "cat")
            introduce_command(line, send_text_option_button, show_keyboard_toggle)
        elif "systemctl status" in line:
            introduce_command(line, send_text_option_button, show_keyboard_toggle)
            line = "q\n"
            introduce_command(line, send_text_option_button, show_keyboard_toggle)
        elif "systemctl restart" in line or "daemon-reload" in line:
            prompt_user_enter_to_continue("if you made sure that the new configuration is in place to 'systemctl restart service'")
            introduce_command(line, send_text_option_button, show_keyboard_toggle)
        elif "ping" in line and not "ansible" in line:
            if not "-c" in line:
                line = line + " -c2"
            introduce_command(line, send_text_option_button, show_keyboard_toggle)
        elif "yum install" in line or "yum reinstall" in line:
            if not "-y" in line:
                line = line + " -y"
            introduce_command(line, send_text_option_button, show_keyboard_toggle)
            # Wait for user to continue after yum has executed
            prompt_user_enter_to_continue("when the installation has finished")
        elif "vgcfgrestore -f" in line:
            prompt_user_enter_to_continue("when you have selected the desired .vg file")
            introduce_command(line, send_text_option_button, show_keyboard_toggle)
        elif "/etc/hosts" in line or "/etc/resolv.conf" in line:
            prompt_user_enter_to_continue("when you have fixed the /etc/hosts or /etc/resolv.conf files")
            introduce_command(line, send_text_option_button, show_keyboard_toggle)
        elif "iscsiadm -m discovery" in line:
            introduce_command(line, send_text_option_button, show_keyboard_toggle)
            prompt_user_enter_to_continue("when discovery command has executed")
        else:
            introduce_command(line, send_text_option_button, show_keyboard_toggle)

        # Standard time for command to execute
        time.sleep(3)


## Main

go_to_main_site("{{ lab_environment }}")
accept_cookies()
login()
accept_cookies()
go_to_course("{{ lab_environment }}", "{{ item }}")

commands = get_commands("{{ chapter_url }}")
print("Commands in the exercise")
print("---------------------------------------")
print(commands)
print("---------------------------------------")
open_workstation()
qa(commands)

create_lab("{{ lab_environment }}", "{{ item }}")
start_lab("{{ lab_environment }}", "{{ item }}")
increase_autostop("{{ lab_environment }}", "{{ item }}")
increase_lifespan("{{ lab_environment }}", "{{ item }}")

#driver.quit()
