#!/usr/local/bin/python3
### Maintained by carias@redhat.com
import re
import time, os.path
from selenium import webdriver
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By

{% if selenium_driver == "chrome" %}
options = webdriver.ChromeOptions()
options.add_argument('--ignore-certificate-errors')
options.add_argument("--window-size=1600,1200")
{% if action == "qa" and  debug == 'True' %}
#DEBUG: Run in terminal: google-chrome --remote-debugging-port=8999 --user-data-dir="/home/carias/.config/google-chrome/quality-assurance"
options.add_experimental_option("debuggerAddress", "localhost:8999")
options.add_argument("--user-data-dir={{ ansible_env.HOME}}/.config/google-chrome/quality-assurance")
{% elif action == "qa" %}
options.add_argument("--headless")
{% else %}
# Define the webdriver to use.
# Chrome webdriver
driver = webdriver.Chrome(options=options)
{% endif %}

{% endif -%}

{% if selenium_driver == "firefox" %}
{% if action == "qa" %}
options = webdriver.FirefoxOptions()
options.set_headless()
driver = webdriver.Firefox(firefox_options=options)
{% else %}
driver = webdriver.Firefox()
driver.install_addon(os.path.expanduser('{{ playbook_dir }}/../copy_on_select-1.0-an+fx.xpi'), temporary=True)
driver.maximize_window()
{% endif %}
{% endif -%}

counter = 1
# Prints the current step
def step(step_str, patience = 1):
    global counter
    print('#####################################')
    print(str(counter) + ": " + step_str)
    counter += 1
    time.sleep(patience)

# Open a google-chrome profile for qa
def open_profile():
    os.popen('google-chrome --remote-debugging-port=8999 --user-data-dir="{{ ansible_env.HOME}}/.config/google-chrome/quality-assurance" &> /dev/null')

# Check if there is an already running open google-chrome profile
def check_running_session():
    pid = os.popen("ps -ef | grep google-chrome/quality-assurance | grep 8999 |grep -v grep| head -n1 | awk {'print $2'}").read()

    if pid: return int(pid)
    else: return 0

# Go to the course site
def go_to_course(course_id):
{% if lab_environment == "rol" %}
    driver.get('https://rol.redhat.com/rol/app/courses/' + course_id)
{% elif lab_environment == "rol-stage" %}
    driver.get('https://rol-factory.ole.redhat.com/rol/app/courses/' + course_id)
{% elif lab_environment == "china" %}
    driver.get('https://rol-cn.ole.redhat.com/rol/app/courses/' + course_id)
{% endif %}
    time.sleep(2)

def check_cookies():
    try:
        WebDriverWait(driver, 2).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//iframe[@title="TrustArc Cookie Consent Manager"]')))
        accept_cookies()
    except:
        pass

def accept_cookies():
        try:
            WebDriverWait(driver, 3).until(EC.element_to_be_clickable((By.XPATH, "//a[@class='call'][text()='Agree and proceed with standard settings']"))).click()
            WebDriverWait(driver, 3).until(EC.element_to_be_clickable((By.XPATH, "//a[@class='call'][text()='Agree and proceed with standard settings']"))).click()
            WebDriverWait(driver, 3).until(EC.element_to_be_clickable((By.XPATH, "//a[@class='call'][text()='Agree and proceed with standard settings']"))).click()
            driver.refresh()
        except:
            driver.refresh()
            pass


def login():
    step("Login into '{{ lab_environment }}' environment")
    try:

{% if lab_environment == "rol" %}
        check_cookies()
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, "/html/body/div[1]/main/div/div/div[1]/div[2]/div[2]/div/section[1]/form/div[1]/input"))).send_keys("{{ rh_username }}@redhat.com")
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="login-show-step2"]'))).click()

        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="rh-sso-flow"]'))).click()

        # RH SSO
        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="username"]'))).send_keys("{{ username }}")
        counter = os.popen("cat {{ playbook_dir }}/../counter").read()
        token = os.popen("oathtool --hotp {{ secret }} -c " + str(counter)).read().replace('\n', '')
        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="password"]'))).send_keys(str("{{ pin }}").replace('\n', '') + str(token).replace('\n', ''))
        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="submit"]'))).click()

        # Increment SSO token counter if everything went well
        counter = int(counter) + 1
        os.popen("echo " + str(counter) + " > {{ playbook_dir }}/../counter")

{% elif lab_environment == "rol-stage" %}
        check_cookies()
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, '/html/body/div/div[2]/div/div/div[2]/ul/a/span'))).click()

        driver.find_element("xpath", '//*[@id="login_field"]').send_keys("{{ github_username }}")
        driver.find_element("xpath", '//*[@id="password"]').send_keys("{{ github_password }}")
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, '/html/body/div[1]/div[3]/main/div/div[3]/form/div/input[13]'))).click()
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="app_totp"]'))).click()
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="app_totp"]'))).send_keys(os.popen("2fa github").read())
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, '/html/body/div[1]/div[3]/main/div/div[3]/div[2]/form/button'))).click()

{% elif lab_environment == "china" %}

        driver.get('https://rol-cn.ole.redhat.com/rol/app/login/local')
        check_cookies()
        WebDriverWait(driver, 200).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="username"]'))).send_keys("rhls_test_basic_cn_003")
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="password"]'))).send_keys("redhat123")
        login_button = WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="login_button"]'))).click()

{% endif %}
        wait_for_site_to_be_ready()
    except:
        check_cookies()
        print("Login failed")


def wait_for_site_to_be_ready():
    try:
        check_cookies()
{% if lab_environment == "rol" or lab_environment == "china" %}
        WebDriverWait(driver, 2).until(EC.element_to_be_clickable((By.XPATH, '/html/body/div[1]/div[1]/header/div[2]/div/nav[2]/button[4]')))
{% elif lab_environment == "rol-stage" %}
        WebDriverWait(driver, 2).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="avatar"]')))
{% endif %}
        print("Site is ready")
    except:
        time.sleep(0.5)
        check_cookies()
        wait_for_site_to_be_ready()


def check_lab_status_button(first_or_second_button):
    if first_or_second_button == "first":
        # Check lab status and start it if stopped or not created. The exception is needed because some courses don't work with the function contains(text(),"")
        try:
            # Try with first button first
            lab_status_button = WebDriverWait(driver, 1).until(EC.presence_of_element_located((By.XPATH, '//*[@id="tab-course-lab-environment"]//*[@type="button"][1][contains(text(), "Create") or contains(text(), "Delete") or contains(text(), "Deleting") or contains(text(), "Creating")]'))).text
        except:
            # Else try with second button
            lab_status_button = WebDriverWait(driver, 1).until(EC.presence_of_element_located((By.XPATH,'//*[@id="tab-course-lab-environment"]//*[@type="button"][2][contains(text(), "Start") or contains(text(), "Stop") or contains(text(), "Starting")]'))).text
    elif first_or_second_button == "second":
        try:
            # Try with second button first
            lab_status_button = WebDriverWait(driver, 1).until(EC.presence_of_element_located((By.XPATH,'//*[@id="tab-course-lab-environment"]//*[@type="button"][2][contains(text(), "Start") or contains(text(), "Stop") or contains(text(), "Starting")]'))).text
        except:
            # Else try with first button
            lab_status_button = WebDriverWait(driver, 1).until(EC.presence_of_element_located((By.XPATH,'//*[@id="tab-course-lab-environment"]//*[@type="button"][2][contains(text(), "Start") or contains(text(), "Stop") or contains(text(), "Starting")]'))).text
    #print("Lab button is: " + lab_status_button)
    return lab_status_button


def select_lab_environment_tab(tab_name):
    if tab_name == "index":
        tab_id = "1"
    elif tab_name == "course":
        tab_id = "2"
    elif tab_name == "lab":
        tab_id = "8"
    try:
        WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="course-tabs-tab-' + tab_id + '"]'))).click()
        time.sleep(0.1)
        lab_environment_tab_status = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="course-tabs-tab-' + tab_id + '"]'))).get_attribute("aria-selected")

        # If tab Lab Environment is not selected, retry
        if not lab_environment_tab_status == "true":
            time.sleep(0.1)
            select_lab_environment_tab(tab_name)
    except:
        print("Lab environment tab not selected succesfully. Retrying...")
        check_cookies()
        time.sleep(2)
        select_lab_environment_tab(tab_name)


def create_lab(course_id):
    step("Creating lab " + course_id)
    try:
        select_lab_environment_tab("lab")
        WebDriverWait(driver, 2).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="tab-course-lab-environment"]//*[@type="button"][contains(text(), "Create")]'))).click()
    except:
        print("Failed to create lab")
    time.sleep(20)

def start_lab(course_id):
    step("Starting lab " + course_id)
    try:
        select_lab_environment_tab("lab")
        WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="tab-course-lab-environment"]//*[@type="button"][contains(text(), "Start")]'))).click()
    except:
        print("Failed to start lab")
    time.sleep(5)

def stop_lab(course_id):
    step("Stopping lab " + course_id)
    try:
        select_lab_environment_tab("lab")
        WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="tab-course-lab-environment"]//*[@type="button"][contains(text(), "Stop")]'))).click()
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@role="dialog"]//*[@type="button"][contains(text(), "Stop")]'))).click()
    except:
        print("Failed to stop lab")
    time.sleep(5)

def delete_lab(course_id):
    step("Deleting lab " + course_id)
    try:
        select_lab_environment_tab("lab")
        WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="tab-course-lab-environment"]//*[@type="button"][contains(text(), "Delete")]'))).click()
        # Confirm deletion
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@role="dialog"]//*[@type="button"][contains(text(), "Delete")]'))).click()
        time.sleep(20)
    except:
        print("Failed to start lab")

def increase_autostop(course_id):
    step("Increasing auto-stop counter")
    try:
        select_lab_environment_tab("lab")
        # Wait until lab has been created and is running
        if check_lab_status_button("first") == "CREATING": time.sleep(30)
        elif check_lab_status_button("second") == "STARTING": time.sleep(15)

        increase_autostop = WebDriverWait(driver, 1).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="tab-course-lab-environment"]/div/table/tr[1]/td[2]/button')))

        for i in range(30):
            increase_autostop.click()
    except:
        pass


def increase_lifespan(course_id):
    step("Increasing auto-destroy counter")
    try:
        select_lab_environment_tab("lab")
        increase_lifespan = WebDriverWait(driver, 1).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="tab-course-lab-environment"]/div/table/tr[2]/td[2]/button')))

        for i in range(30):
            increase_lifespan.click()
    except:
        pass


def impersonate():
    step("Impersonating user '{{ impersonate_username }}'")
    try:
        driver.refresh()
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[text()="Switch user"]'))).click()

        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '/html/body/div[3]/div[2]/div/div/div[2]/form/button')))
        time.sleep(1)
        driver.find_element("xpath", '//*[@id="formInlineUsername"]').send_keys("{{ impersonate_username }}")

        driver.find_element("xpath", "/html/body/div[3]/div[2]/div/div/div[2]/form/button").click()
        time.sleep(5)

        WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.XPATH, '/html/body/div[1]/div[2]/button')))

    except:
        print("An exception occurred while impersonating {{ impersonate_username }}")
        impersonate()

# Looks for the workstation console button and opens the console in a new tab
def open_workstation():
    step("Opening workstation console")
    # Open the Lab Environment tab
    select_lab_environment_tab("lab")
    # Open the workstation console;
    open_workstation_console = WebDriverWait(driver, 300).until(EC.element_to_be_clickable(
            (By.XPATH, "//*[text()='workstation']/../td[3]/button"))).click()
    # Wait for the console to open
    time.sleep(6)
    handles = driver.window_handles
    driver.switch_to.window(handles[1])

    # Open virtual keyboard
    time.sleep(3)
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
        (By.XPATH, '//*[@id="showKeyboard"]'))).click()

# Gets a list of the commands from the current section
def get_commands(course, chapter_and_section):
    step("Getting commands from exercise " + chapter_and_section)
    go_to_course(course + "/pages/" + chapter_and_section)
    select_lab_environment_tab("course")
    time.sleep(4)
    # Get the lab name and grep it in the project git directory to find the xml file
    lab_script_name = WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="course-tabs-pane-2"]//div[@class="taskprerequisites"]//strong[@class="userinput"]//code'))).text
    course_no_version = course.split("-")[0]
    course_version = course.split("-")[1]
    try:
        if re.findall("ea", course):
            course_no_version = course_no_version.split("ea")[0]
            course_version = 'earlyaccess'
    except:
        pass

    # checkout the current course version branch
    os.popen("cd {{ playbook_dir }}/files/"  + course_no_version + "; git checkout $(git branch -a |grep " + course_version +" |head -n1) &>/dev/null").read()
    # get the commands from source
    commands = os.popen("cat $(grep -ri '" + lab_script_name + "' {{ playbook_dir }}/files/" + course_no_version + "/* |grep xml |head -n1 |cut -d ':' -f'1') | xq -x //userinput").read()

    print("\n")
    print(commands)
    print("#####################################")

    return str(commands)

def multiline_command(command):
    if re.search(r'\\', command): return True
    else: return False


def filter_commands_list(commands):
    commands_array = commands.split("\n")
    composed_command= ''
    previous_command=False
    filtered_commands_array=[]

    for i in range(len(commands_array)):
        command = commands_array[i]
        # If the current command string has an ending '\' add it to the composed_command variable
        if multiline_command(commands_array[i]):
            composed_command = composed_command + str(commands_array[i].replace('\\',''))
            previous_command = True
        # If not, and the previous command did, finish the composed_command and restore variables values
        elif previous_command:
            command = composed_command + str(commands_array[i])
            composed_command = ''
            previous_command = False
        # If the current command doesn't have an ending '\' add it to the filtered commands list
        if not multiline_command(commands_array[i]) and commands_array[i] != '':
            filtered_commands_array = filtered_commands_array + [command]

    return filtered_commands_array

# Uses the Text button function to paste and the Digital Keyboard UI to execute it
def introduce_command(command, send_text_option_button):
    if command != '':
        # Open text dialog
        send_text_option_button.click()
        # Paste command into text box
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="sendTextInput"]'))).send_keys(command)
        # Click Send button to send the command
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="sendTextButton"]'))).click()
        # time.sleep depending on the length of the command
        wait_for_command_to_paste(command)
        # Click Enter
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '/html/body/div[9]/div/div/div[3]/div/div[1]/div[3]/div[13]/div/div'))).click()

# Prompts for user input to continue the execution of the QA
def prompt_user_enter_to_continue(custom_message):
    print("")
    input("Press Enter to continue " + custom_message + "\n")

# This function includes the whole list of exceptions that are not just enter a command and press enter
def manage_special_commands(command, send_text_option_button):

    if re.match("lab .*start", command) or re.match("lab .*setup", command):
        command = "date; time " + command
        introduce_command(command, send_text_option_button)
        # Wait for user to continue after the lab script has executed
        prompt_user_enter_to_continue("with the exercise.")
    elif re.match("lab .*grade", command) :
        command = "date; time " + command
        introduce_command(command, send_text_option_button)
        prompt_user_enter_to_continue("with the exercise.")
    elif  re.match("lab .*finish", command):
        command = "date; time " + command
        introduce_command(command, send_text_option_button)
        print("##############  Exercise completed ##############")
    elif "ssh" in command:
        introduce_command(command, send_text_option_button)
        prompt_user_enter_to_continue("after the ssh.")
    elif "ansible" in command:
        # Wait for user to continue after the playbook has been reviewed/created
        prompt_user_enter_to_continue("if you did review/create the playbook.")
        introduce_command(command, send_text_option_button)
        prompt_user_enter_to_continue("if playbook finished")
    elif "ok=" in command or "failed=" in command:
        print("skipping output")
    elif "podman build" in command:
        prompt_user_enter_to_continue("if the Containerfile is ready to build.")
        introduce_command(command, send_text_option_button)
        prompt_user_enter_to_continue("if podman build finished.")
    elif "vim " in command or "vi " in command:
        introduce_command(command, send_text_option_button)
        prompt_user_enter_to_continue("if you did review/create the file.")
    elif "Enter" in command:
        command = "\n"
        introduce_command(command, send_text_option_button)
    elif "less " in command:
        command = command.replace("less ", "cat ")
        introduce_command(command, send_text_option_button)
    elif "systemctl status" in command:
        introduce_command(command, send_text_option_button)
        command = "q\n"
        introduce_command(command, send_text_option_button)
    elif "systemctl restart" in command or "daemon-reload" in command:
        prompt_user_enter_to_continue(
            "if you made sure that the new configuration is in place to 'systemctl restart service.'")
        introduce_command(command, send_text_option_button)
    elif "journalctl" in command:
        introduce_command(command, send_text_option_button)
        command = " \n"
        introduce_command(command, send_text_option_button)
    elif "ping" in command and not "ansible" in command:
        if not "-c" in command:
            command = command + " -c2"
        introduce_command(command, send_text_option_button)
    elif "yum install" in command or "yum reinstall" in command or "yum remove" in command or "dnf install" in command:
        if not "-y" in command:
            command = command + " -y"
        introduce_command(command, send_text_option_button)
        # Wait for user to continue after yum has executed
        prompt_user_enter_to_continue("when the installation has finished.")
    elif "podman login registry.redhat.io" in command:
        introduce_command(command, send_text_option_button)
        # Wait for user to continue after yum has executed
        prompt_user_enter_to_continue("when login is completed.")
    elif "vgcfgrestore -f" in command:
        prompt_user_enter_to_continue("when you have selected the desired .vg file.")
        introduce_command(command, send_text_option_button)
    elif "/etc/hosts" in command or "/etc/resolv.conf" in command:
        prompt_user_enter_to_continue("when you have reviewed/fixed the /etc/hosts or /etc/resolv.conf files.")
        introduce_command(command, send_text_option_button)
    elif "iscsiadm -m discovery" in command:
        introduce_command(command, send_text_option_button)
        prompt_user_enter_to_continue("when discovery command has executed.")
    elif "oc edit" in command:
        introduce_command(command, send_text_option_button)
        prompt_user_enter_to_continue("when the file edit has been saved.")
    else:
        return 0

    return 1

# Waits a proportional time with the number of characters of the command to be pasted
def wait_for_command_to_paste(command):
    time.sleep(len(command) * 0.1)

def get_ge_and_labs(course):
    step("Getting the list of Guided Exercises and Labs")
    go_to_course(course)

    time.sleep(2)
    select_lab_environment_tab("index")

    chapter_and_section_list = []

    num_rows = len(driver.find_elements('xpath', '//*[@id="tab-course-toc"]/tbody/tr'))

    for t_row in range(1, (num_rows + 1)):
        title = driver.find_element('xpath', '//*[@id="tab-course-toc"]/tbody/tr[' + str(t_row) + ']/td').text
        title_href = driver.find_element('xpath', '//*[@id="tab-course-toc"]/tbody/tr[' + str(t_row) + ']/td/div/a').get_attribute("href")

        if "Guided Exercise: " in title or "Lab: " in title:
            try:
                print(title)
                chapter_and_section = str(re.findall("ch[0-9]*s[0-9]*", title_href)[0])
                print("Section: " + chapter_and_section)
                chapter_and_section_list.append(chapter_and_section)
            except:
                pass

    return chapter_and_section_list

# Receives a list of the commands of the section
def qa(commands_array):
    step("Starting QA")
    send_text_option_button = WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
        (By.XPATH, '//*[@id="showSendTextDialog"]')))
    show_keyboard_toggle = WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
        (By.XPATH, '//*[@id="showKeyboard"]')))

    for i in range(len(commands_array)):
        if commands_array[i] != '':
            print("Introducing: " + commands_array[i])
            if i + 1 < len(commands_array):
                print("Next command: " + commands_array[i + 1])
                print('-------------------------------------------------')
            # Manage if the command has an exception, if there is not, just introduce_command normaly
            if not manage_special_commands(commands_array[i], send_text_option_button):
                introduce_command(commands_array[i], send_text_option_button)

            # Standard time for command to execute
            time.sleep(3)

def toggle_tab(tab):
    handles = driver.window_handles
    if tab == "console":
        driver.switch_to.window(handles[1])
    elif tab == "guide":
        driver.switch_to.window(handles[0])

## Main
{% if action == "qa" and selenium_driver == "chrome" and debug == 'True' %}
if not check_running_session():
    open_profile()
    driver = webdriver.Chrome(options=options)
    login()
else:
    driver = webdriver.Chrome(options=options)
{% elif action == "qa" and selenium_driver == "chrome" %}
driver = webdriver.Chrome(options=options)
{% endif %}

# Rol prod, rol-stage and china environments are different on login and cookies
{% if lab_environment == "rol" %}
go_to_course("rh124-9.0")
login()
{% endif -%}

{% if lab_environment == "rol-stage" %}
go_to_course("rh124-9.0")
login()
{% endif %}

{% for course in course_id -%}

{% if action == "start" %}

{% if lab_environment == "china" %}
login()
{% endif %}


go_to_course("{{ course }}")
select_lab_environment_tab("lab")
lab_status_button = check_lab_status_button("first")
if lab_status_button == "CREATE":
    create_lab("{{ course }}")
elif lab_status_button == "START" or lab_status_button == "DELETE":
    start_lab("{{ course }}")
increase_autostop("{{ course }}")
increase_lifespan("{{ course }}")
{% endif %}

{% if action == "create" %}

{% if lab_environment == "china" %}
login()
{% endif %}
go_to_course("{{ course }}")
select_lab_environment_tab("lab")
lab_status_button = check_lab_status_button("first")
if lab_status_button == "CREATE":
    create_lab("{{ course }}")
increase_lifespan("{{ course }}")
{% endif %}

{% if action == "stop" %}
{% if lab_environment == "china" %}
login()
{% endif %}
go_to_course("{{ course }}")
select_lab_environment_tab("lab")
lab_status_button = check_lab_status_button("second")
if lab_status_button == "STOP":
    stop_lab("{{ course }}")
{% endif %}

{% if action == "delete" %}
{% if lab_environment == "china" %}
login()
{% endif %}
go_to_course("{{ course }}")
select_lab_environment_tab("lab")
lab_status_button = check_lab_status_button("first")
if lab_status_button != "CREATE":
    delete_lab("{{ course }}")
{% endif %}

{% if action == "recreate" %}
{% if lab_environment == "china" %}
login()
{% endif %}
go_to_course("{{ course }}")
select_lab_environment_tab("lab")
lab_status_button = check_lab_status_button("second")
if lab_status_button == "STOP" or lab_status_button == "START":
    delete_lab("{{ course }}")
    create_lab("{{ course }}")
elif check_lab_status_button("first") == "CREATE":
    create_lab("{{ course }}")
increase_autostop("{{ course }}")
increase_lifespan("{{ course }}")
{% endif %}

{% if action == "impersonate" %}
select_lab_environment_tab("course")
impersonate()
go_to_course("{{ course }}")
select_lab_environment_tab("lab")
{% endif %}

{%- if action == "qa" -%}

{%- if lab_environment == "china" and selenium_driver == "firefox" -%}
login()
{%- endif %}
# Wait for the site to be ready
go_to_course("{{ course }}")
raw_commands = get_commands("{{ course }}", "{{ chapter_and_section }}")
commands = filter_commands_list(raw_commands)
ge_and_labs_list = get_ge_and_labs("{{ course }}")

select_lab_environment_tab("lab")
try:
    lab_status_button = check_lab_status_button("second")
except:
    lab_status_button = check_lab_status_button("first")
if lab_status_button == "START":
    start_lab("{{ course }}")
elif lab_status_button == "CREATE":
    create_lab("{{ course }}")

lab_status_first_button = check_lab_status_button("first")
lab_status_second_button = check_lab_status_button("second")
if lab_status_second_button == "STOP" or lab_status_second_button == "STARTING" or lab_status_first_button == "CREATING" or lab_status_first_button == "DELETE":
    increase_autostop("{{ course }}")
    increase_lifespan("{{ course }}")

on_track = False
for section in ge_and_labs_list:
    # If section is current execute the qa
    if section == "{{ chapter_and_section }}":
        on_track = True
        open_workstation()
    if on_track:
        toggle_tab("guide")
        if commands == []:
            commands = filter_commands_list(get_commands("{{ course }}", section))
        toggle_tab("console")
        print("Current Section: " + section)
        prompt_user_enter_to_continue("when the terminal is ready to receive the commands")
        qa(commands)
        commands = []
print("#####################################")
print("Finished QA")
print("#####################################")

{% endif %}

{% endfor %}

{%- if action == "delete" or  action == "create" -%}
driver.quit()
{%- endif %}
